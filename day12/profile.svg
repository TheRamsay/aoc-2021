<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="118" onload="init(evt)" viewBox="0 0 1200 118" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="118" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="101.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="101.00"> </text><svg id="frames" x="10" width="1180" total_samples="39868"><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (7 samples, 0.02%)</title><rect x="0.0000%" y="37" width="0.0176%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="7"/><text x="0.2500%" y="47.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (38 samples, 0.10%)</title><rect x="0.0176%" y="37" width="0.0953%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="38"/><text x="0.2676%" y="47.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (16 samples, 0.04%)</title><rect x="0.1129%" y="37" width="0.0401%" height="15" fill="rgb(221,193,54)" fg:x="45" fg:w="16"/><text x="0.3629%" y="47.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (5 samples, 0.01%)</title><rect x="0.1530%" y="37" width="0.0125%" height="15" fill="rgb(248,212,6)" fg:x="61" fg:w="5"/><text x="0.4030%" y="47.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (180 samples, 0.45%)</title><rect x="0.1655%" y="37" width="0.4515%" height="15" fill="rgb(208,68,35)" fg:x="66" fg:w="180"/><text x="0.4155%" y="47.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (7 samples, 0.02%)</title><rect x="0.6170%" y="37" width="0.0176%" height="15" fill="rgb(232,128,0)" fg:x="246" fg:w="7"/><text x="0.8670%" y="47.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (26 samples, 0.07%)</title><rect x="0.6346%" y="37" width="0.0652%" height="15" fill="rgb(207,160,47)" fg:x="253" fg:w="26"/><text x="0.8846%" y="47.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (158 samples, 0.40%)</title><rect x="0.6998%" y="37" width="0.3963%" height="15" fill="rgb(228,23,34)" fg:x="279" fg:w="158"/><text x="0.9498%" y="47.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (25 samples, 0.06%)</title><rect x="1.0961%" y="37" width="0.0627%" height="15" fill="rgb(218,30,26)" fg:x="437" fg:w="25"/><text x="1.3461%" y="47.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (250 samples, 0.63%)</title><rect x="1.1588%" y="37" width="0.6271%" height="15" fill="rgb(220,122,19)" fg:x="462" fg:w="250"/><text x="1.4088%" y="47.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (7 samples, 0.02%)</title><rect x="1.7859%" y="37" width="0.0176%" height="15" fill="rgb(250,228,42)" fg:x="712" fg:w="7"/><text x="2.0359%" y="47.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (562 samples, 1.41%)</title><rect x="1.8035%" y="37" width="1.4097%" height="15" fill="rgb(240,193,28)" fg:x="719" fg:w="562"/><text x="2.0535%" y="47.50"></text></g><g><title>&lt;alloc::string::String as alloc::string::ToString&gt;::to_string (20 samples, 0.05%)</title><rect x="3.2131%" y="37" width="0.0502%" height="15" fill="rgb(216,20,37)" fg:x="1281" fg:w="20"/><text x="3.4631%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (264 samples, 0.66%)</title><rect x="3.2633%" y="37" width="0.6622%" height="15" fill="rgb(206,188,39)" fg:x="1301" fg:w="264"/><text x="3.5133%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;&amp;str&gt;&gt;::eq (13 samples, 0.03%)</title><rect x="3.9255%" y="37" width="0.0326%" height="15" fill="rgb(217,207,13)" fg:x="1565" fg:w="13"/><text x="4.1755%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (62 samples, 0.16%)</title><rect x="3.9581%" y="37" width="0.1555%" height="15" fill="rgb(231,73,38)" fg:x="1578" fg:w="62"/><text x="4.2081%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (47 samples, 0.12%)</title><rect x="4.1136%" y="37" width="0.1179%" height="15" fill="rgb(225,20,46)" fg:x="1640" fg:w="47"/><text x="4.3636%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (107 samples, 0.27%)</title><rect x="4.2315%" y="37" width="0.2684%" height="15" fill="rgb(210,31,41)" fg:x="1687" fg:w="107"/><text x="4.4815%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (77 samples, 0.19%)</title><rect x="4.4998%" y="37" width="0.1931%" height="15" fill="rgb(221,200,47)" fg:x="1794" fg:w="77"/><text x="4.7498%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (157 samples, 0.39%)</title><rect x="4.6930%" y="37" width="0.3938%" height="15" fill="rgb(226,26,5)" fg:x="1871" fg:w="157"/><text x="4.9430%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (106 samples, 0.27%)</title><rect x="5.0868%" y="37" width="0.2659%" height="15" fill="rgb(249,33,26)" fg:x="2028" fg:w="106"/><text x="5.3368%" y="47.50"></text></g><g><title>&lt;core::core_arch::x86::__m128i as core::core_arch::x86::m128iExt&gt;::as_m128i (300 samples, 0.75%)</title><rect x="5.3527%" y="37" width="0.7525%" height="15" fill="rgb(235,183,28)" fg:x="2134" fg:w="300"/><text x="5.6027%" y="47.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (163 samples, 0.41%)</title><rect x="6.1051%" y="37" width="0.4088%" height="15" fill="rgb(221,5,38)" fg:x="2434" fg:w="163"/><text x="6.3551%" y="47.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (331 samples, 0.83%)</title><rect x="6.5140%" y="37" width="0.8302%" height="15" fill="rgb(247,18,42)" fg:x="2597" fg:w="331"/><text x="6.7640%" y="47.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (758 samples, 1.90%)</title><rect x="7.3442%" y="37" width="1.9013%" height="15" fill="rgb(241,131,45)" fg:x="2928" fg:w="758"/><text x="7.5942%" y="47.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,082 samples, 5.22%)</title><rect x="9.2455%" y="37" width="5.2222%" height="15" fill="rgb(249,31,29)" fg:x="3686" fg:w="2082"/><text x="9.4955%" y="47.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (58 samples, 0.15%)</title><rect x="14.4677%" y="37" width="0.1455%" height="15" fill="rgb(225,111,53)" fg:x="5768" fg:w="58"/><text x="14.7177%" y="47.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (46 samples, 0.12%)</title><rect x="14.6132%" y="37" width="0.1154%" height="15" fill="rgb(238,160,17)" fg:x="5826" fg:w="46"/><text x="14.8632%" y="47.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::cmp::PartialEq&gt;::eq (53 samples, 0.13%)</title><rect x="14.7286%" y="37" width="0.1329%" height="15" fill="rgb(214,148,48)" fg:x="5872" fg:w="53"/><text x="14.9786%" y="47.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::FromResidual&gt;::from_residual (8 samples, 0.02%)</title><rect x="14.8615%" y="37" width="0.0201%" height="15" fill="rgb(232,36,49)" fg:x="5925" fg:w="8"/><text x="15.1115%" y="47.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (58 samples, 0.15%)</title><rect x="14.8816%" y="37" width="0.1455%" height="15" fill="rgb(209,103,24)" fg:x="5933" fg:w="58"/><text x="15.1316%" y="47.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::from_output (14 samples, 0.04%)</title><rect x="15.0271%" y="37" width="0.0351%" height="15" fill="rgb(229,88,8)" fg:x="5991" fg:w="14"/><text x="15.2771%" y="47.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::FromResidual&gt;::from_residual (45 samples, 0.11%)</title><rect x="15.0622%" y="37" width="0.1129%" height="15" fill="rgb(213,181,19)" fg:x="6005" fg:w="45"/><text x="15.3122%" y="47.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (177 samples, 0.44%)</title><rect x="15.1751%" y="37" width="0.4440%" height="15" fill="rgb(254,191,54)" fg:x="6050" fg:w="177"/><text x="15.4251%" y="47.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (165 samples, 0.41%)</title><rect x="15.6190%" y="37" width="0.4139%" height="15" fill="rgb(241,83,37)" fg:x="6227" fg:w="165"/><text x="15.8690%" y="47.50"></text></g><g><title>&lt;core::ptr::unique::Unique&lt;T&gt; as core::convert::From&lt;&amp;mut T&gt;&gt;::from (13 samples, 0.03%)</title><rect x="16.0329%" y="37" width="0.0326%" height="15" fill="rgb(233,36,39)" fg:x="6392" fg:w="13"/><text x="16.2829%" y="47.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (82 samples, 0.21%)</title><rect x="16.0655%" y="37" width="0.2057%" height="15" fill="rgb(226,3,54)" fg:x="6405" fg:w="82"/><text x="16.3155%" y="47.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (78 samples, 0.20%)</title><rect x="16.2712%" y="37" width="0.1956%" height="15" fill="rgb(245,192,40)" fg:x="6487" fg:w="78"/><text x="16.5212%" y="47.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (499 samples, 1.25%)</title><rect x="16.4668%" y="37" width="1.2516%" height="15" fill="rgb(238,167,29)" fg:x="6565" fg:w="499"/><text x="16.7168%" y="47.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 0.16%)</title><rect x="17.7185%" y="37" width="0.1555%" height="15" fill="rgb(232,182,51)" fg:x="7064" fg:w="62"/><text x="17.9685%" y="47.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (45 samples, 0.11%)</title><rect x="17.8740%" y="37" width="0.1129%" height="15" fill="rgb(231,60,39)" fg:x="7126" fg:w="45"/><text x="18.1240%" y="47.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (46 samples, 0.12%)</title><rect x="17.9869%" y="37" width="0.1154%" height="15" fill="rgb(208,69,12)" fg:x="7171" fg:w="46"/><text x="18.2369%" y="47.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (558 samples, 1.40%)</title><rect x="18.1022%" y="37" width="1.3996%" height="15" fill="rgb(235,93,37)" fg:x="7217" fg:w="558"/><text x="18.3522%" y="47.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 0.13%)</title><rect x="19.5019%" y="37" width="0.1329%" height="15" fill="rgb(213,116,39)" fg:x="7775" fg:w="53"/><text x="19.7519%" y="47.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (84 samples, 0.21%)</title><rect x="19.6348%" y="37" width="0.2107%" height="15" fill="rgb(222,207,29)" fg:x="7828" fg:w="84"/><text x="19.8848%" y="47.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (959 samples, 2.41%)</title><rect x="19.8455%" y="37" width="2.4054%" height="15" fill="rgb(206,96,30)" fg:x="7912" fg:w="959"/><text x="20.0955%" y="47.50">&lt;h..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (180 samples, 0.45%)</title><rect x="22.2509%" y="37" width="0.4515%" height="15" fill="rgb(218,138,4)" fg:x="8871" fg:w="180"/><text x="22.5009%" y="47.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.10%)</title><rect x="22.7024%" y="37" width="0.0978%" height="15" fill="rgb(250,191,14)" fg:x="9051" fg:w="39"/><text x="22.9524%" y="47.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (7 samples, 0.02%)</title><rect x="22.8002%" y="37" width="0.0176%" height="15" fill="rgb(239,60,40)" fg:x="9090" fg:w="7"/><text x="23.0502%" y="47.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (36 samples, 0.09%)</title><rect x="22.8178%" y="37" width="0.0903%" height="15" fill="rgb(206,27,48)" fg:x="9097" fg:w="36"/><text x="23.0678%" y="47.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (86 samples, 0.22%)</title><rect x="22.9081%" y="37" width="0.2157%" height="15" fill="rgb(225,35,8)" fg:x="9133" fg:w="86"/><text x="23.1581%" y="47.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (17 samples, 0.04%)</title><rect x="23.1238%" y="37" width="0.0426%" height="15" fill="rgb(250,213,24)" fg:x="9219" fg:w="17"/><text x="23.3738%" y="47.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::deref::DerefMut&gt;::deref_mut (40 samples, 0.10%)</title><rect x="23.1664%" y="37" width="0.1003%" height="15" fill="rgb(247,123,22)" fg:x="9236" fg:w="40"/><text x="23.4164%" y="47.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (16 samples, 0.04%)</title><rect x="23.2743%" y="37" width="0.0401%" height="15" fill="rgb(231,138,38)" fg:x="9279" fg:w="16"/><text x="23.5243%" y="47.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (46 samples, 0.12%)</title><rect x="23.3144%" y="37" width="0.1154%" height="15" fill="rgb(231,145,46)" fg:x="9295" fg:w="46"/><text x="23.5644%" y="47.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (49 samples, 0.12%)</title><rect x="23.4298%" y="37" width="0.1229%" height="15" fill="rgb(251,118,11)" fg:x="9341" fg:w="49"/><text x="23.6798%" y="47.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::clone::Clone&gt;::clone (47 samples, 0.12%)</title><rect x="23.5527%" y="37" width="0.1179%" height="15" fill="rgb(217,147,25)" fg:x="9390" fg:w="47"/><text x="23.8027%" y="47.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (37 samples, 0.09%)</title><rect x="23.6706%" y="37" width="0.0928%" height="15" fill="rgb(247,81,37)" fg:x="9437" fg:w="37"/><text x="23.9206%" y="47.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (16 samples, 0.04%)</title><rect x="23.7634%" y="37" width="0.0401%" height="15" fill="rgb(209,12,38)" fg:x="9474" fg:w="16"/><text x="24.0134%" y="47.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (95 samples, 0.24%)</title><rect x="23.8036%" y="37" width="0.2383%" height="15" fill="rgb(227,1,9)" fg:x="9490" fg:w="95"/><text x="24.0536%" y="47.50"></text></g><g><title>[unknown] (20 samples, 0.05%)</title><rect x="24.0418%" y="37" width="0.0502%" height="15" fill="rgb(248,47,43)" fg:x="9585" fg:w="20"/><text x="24.2918%" y="47.50"></text></g><g><title>__memcmp_sse4_1 (142 samples, 0.36%)</title><rect x="24.0920%" y="37" width="0.3562%" height="15" fill="rgb(221,10,30)" fg:x="9605" fg:w="142"/><text x="24.3420%" y="47.50"></text></g><g><title>__memcpy_ssse3_back (1,356 samples, 3.40%)</title><rect x="24.4482%" y="37" width="3.4012%" height="15" fill="rgb(210,229,1)" fg:x="9747" fg:w="1356"/><text x="24.6982%" y="47.50">__m..</text></g><g><title>__memset_avx2_unaligned (4 samples, 0.01%)</title><rect x="27.8494%" y="37" width="0.0100%" height="15" fill="rgb(222,148,37)" fg:x="11103" fg:w="4"/><text x="28.0994%" y="47.50"></text></g><g><title>__rdl_alloc (63 samples, 0.16%)</title><rect x="27.8594%" y="37" width="0.1580%" height="15" fill="rgb(234,67,33)" fg:x="11107" fg:w="63"/><text x="28.1094%" y="47.50"></text></g><g><title>__rdl_dealloc (22 samples, 0.06%)</title><rect x="28.0175%" y="37" width="0.0552%" height="15" fill="rgb(247,98,35)" fg:x="11170" fg:w="22"/><text x="28.2675%" y="47.50"></text></g><g><title>__rust_alloc (21 samples, 0.05%)</title><rect x="28.0726%" y="37" width="0.0527%" height="15" fill="rgb(247,138,52)" fg:x="11192" fg:w="21"/><text x="28.3226%" y="47.50"></text></g><g><title>__rust_dealloc (16 samples, 0.04%)</title><rect x="28.1253%" y="37" width="0.0401%" height="15" fill="rgb(213,79,30)" fg:x="11213" fg:w="16"/><text x="28.3753%" y="47.50"></text></g><g><title>_int_free (650 samples, 1.63%)</title><rect x="28.1730%" y="37" width="1.6304%" height="15" fill="rgb(246,177,23)" fg:x="11232" fg:w="650"/><text x="28.4230%" y="47.50"></text></g><g><title>_int_malloc (206 samples, 0.52%)</title><rect x="29.8034%" y="37" width="0.5167%" height="15" fill="rgb(230,62,27)" fg:x="11882" fg:w="206"/><text x="30.0534%" y="47.50"></text></g><g><title>_start (6 samples, 0.02%)</title><rect x="30.3201%" y="37" width="0.0150%" height="15" fill="rgb(216,154,8)" fg:x="12088" fg:w="6"/><text x="30.5701%" y="47.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (140 samples, 0.35%)</title><rect x="30.3351%" y="37" width="0.3512%" height="15" fill="rgb(244,35,45)" fg:x="12094" fg:w="140"/><text x="30.5851%" y="47.50"></text></g><g><title>alloc::alloc::alloc (39 samples, 0.10%)</title><rect x="30.6863%" y="37" width="0.0978%" height="15" fill="rgb(251,115,12)" fg:x="12234" fg:w="39"/><text x="30.9363%" y="47.50"></text></g><g><title>alloc::alloc::dealloc (176 samples, 0.44%)</title><rect x="30.7841%" y="37" width="0.4415%" height="15" fill="rgb(240,54,50)" fg:x="12273" fg:w="176"/><text x="31.0341%" y="47.50"></text></g><g><title>alloc::alloc::exchange_malloc (43 samples, 0.11%)</title><rect x="31.2255%" y="37" width="0.1079%" height="15" fill="rgb(233,84,52)" fg:x="12449" fg:w="43"/><text x="31.4755%" y="47.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::into_raw_with_allocator (19 samples, 0.05%)</title><rect x="31.3334%" y="37" width="0.0477%" height="15" fill="rgb(207,117,47)" fg:x="12492" fg:w="19"/><text x="31.5834%" y="47.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::into_unique (20 samples, 0.05%)</title><rect x="31.3811%" y="37" width="0.0502%" height="15" fill="rgb(249,43,39)" fg:x="12511" fg:w="20"/><text x="31.6311%" y="47.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::leak (21 samples, 0.05%)</title><rect x="31.4312%" y="37" width="0.0527%" height="15" fill="rgb(209,38,44)" fg:x="12531" fg:w="21"/><text x="31.6812%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (632 samples, 1.59%)</title><rect x="31.4839%" y="37" width="1.5852%" height="15" fill="rgb(236,212,23)" fg:x="12552" fg:w="632"/><text x="31.7339%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::from_raw_parts_in (15 samples, 0.04%)</title><rect x="33.0691%" y="37" width="0.0376%" height="15" fill="rgb(242,79,21)" fg:x="13184" fg:w="15"/><text x="33.3191%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (167 samples, 0.42%)</title><rect x="33.1068%" y="37" width="0.4189%" height="15" fill="rgb(211,96,35)" fg:x="13199" fg:w="167"/><text x="33.3568%" y="47.50"></text></g><g><title>alloc::slice::hack::into_vec (23 samples, 0.06%)</title><rect x="33.5332%" y="37" width="0.0577%" height="15" fill="rgb(253,215,40)" fg:x="13369" fg:w="23"/><text x="33.7832%" y="47.50"></text></g><g><title>alloc::string::String::as_str (6 samples, 0.02%)</title><rect x="33.5908%" y="37" width="0.0150%" height="15" fill="rgb(211,81,21)" fg:x="13392" fg:w="6"/><text x="33.8408%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (79 samples, 0.20%)</title><rect x="33.6059%" y="37" width="0.1982%" height="15" fill="rgb(208,190,38)" fg:x="13398" fg:w="79"/><text x="33.8559%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (141 samples, 0.35%)</title><rect x="33.8041%" y="37" width="0.3537%" height="15" fill="rgb(235,213,38)" fg:x="13477" fg:w="141"/><text x="34.0541%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (21 samples, 0.05%)</title><rect x="34.1577%" y="37" width="0.0527%" height="15" fill="rgb(237,122,38)" fg:x="13618" fg:w="21"/><text x="34.4077%" y="47.50"></text></g><g><title>cfree@GLIBC_2.2.5 (347 samples, 0.87%)</title><rect x="34.2104%" y="37" width="0.8704%" height="15" fill="rgb(244,218,35)" fg:x="13639" fg:w="347"/><text x="34.4604%" y="47.50"></text></g><g><title>core::alloc::layout::Layout::align (247 samples, 0.62%)</title><rect x="35.0808%" y="37" width="0.6195%" height="15" fill="rgb(240,68,47)" fg:x="13986" fg:w="247"/><text x="35.3308%" y="47.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (214 samples, 0.54%)</title><rect x="35.7003%" y="37" width="0.5368%" height="15" fill="rgb(210,16,53)" fg:x="14233" fg:w="214"/><text x="35.9503%" y="47.50"></text></g><g><title>core::alloc::layout::Layout::new (74 samples, 0.19%)</title><rect x="36.2371%" y="37" width="0.1856%" height="15" fill="rgb(235,124,12)" fg:x="14447" fg:w="74"/><text x="36.4871%" y="47.50"></text></g><g><title>core::alloc::layout::Layout::size (181 samples, 0.45%)</title><rect x="36.4252%" y="37" width="0.4540%" height="15" fill="rgb(224,169,11)" fg:x="14522" fg:w="181"/><text x="36.6752%" y="47.50"></text></g><g><title>core::alloc::layout::size_align (42 samples, 0.11%)</title><rect x="36.8792%" y="37" width="0.1053%" height="15" fill="rgb(250,166,2)" fg:x="14703" fg:w="42"/><text x="37.1292%" y="47.50"></text></g><g><title>core::char::convert::from_u32_unchecked (38 samples, 0.10%)</title><rect x="36.9845%" y="37" width="0.0953%" height="15" fill="rgb(242,216,29)" fg:x="14745" fg:w="38"/><text x="37.2345%" y="47.50"></text></g><g><title>core::clone::Clone::clone (165 samples, 0.41%)</title><rect x="37.0799%" y="37" width="0.4139%" height="15" fill="rgb(230,116,27)" fg:x="14783" fg:w="165"/><text x="37.3299%" y="47.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for u64&gt;::clone (18 samples, 0.05%)</title><rect x="37.4937%" y="37" width="0.0451%" height="15" fill="rgb(228,99,48)" fg:x="14948" fg:w="18"/><text x="37.7437%" y="47.50"></text></g><g><title>core::cmp::Ord::max (18 samples, 0.05%)</title><rect x="37.5389%" y="37" width="0.0451%" height="15" fill="rgb(253,11,6)" fg:x="14966" fg:w="18"/><text x="37.7889%" y="47.50"></text></g><g><title>core::cmp::Ord::min (49 samples, 0.12%)</title><rect x="37.5840%" y="37" width="0.1229%" height="15" fill="rgb(247,143,39)" fg:x="14984" fg:w="49"/><text x="37.8340%" y="47.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (187 samples, 0.47%)</title><rect x="37.7069%" y="37" width="0.4690%" height="15" fill="rgb(236,97,10)" fg:x="15033" fg:w="187"/><text x="37.9569%" y="47.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for ()&gt;::eq (5 samples, 0.01%)</title><rect x="38.1760%" y="37" width="0.0125%" height="15" fill="rgb(233,208,19)" fg:x="15220" fg:w="5"/><text x="38.4260%" y="47.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (123 samples, 0.31%)</title><rect x="38.1885%" y="37" width="0.3085%" height="15" fill="rgb(216,164,2)" fg:x="15225" fg:w="123"/><text x="38.4385%" y="47.50"></text></g><g><title>core::cmp::max_by (117 samples, 0.29%)</title><rect x="38.4970%" y="37" width="0.2935%" height="15" fill="rgb(220,129,5)" fg:x="15348" fg:w="117"/><text x="38.7470%" y="47.50"></text></g><g><title>core::cmp::min (42 samples, 0.11%)</title><rect x="38.7905%" y="37" width="0.1053%" height="15" fill="rgb(242,17,10)" fg:x="15465" fg:w="42"/><text x="39.0405%" y="47.50"></text></g><g><title>core::cmp::min_by (379 samples, 0.95%)</title><rect x="38.8959%" y="37" width="0.9506%" height="15" fill="rgb(242,107,0)" fg:x="15507" fg:w="379"/><text x="39.1459%" y="47.50"></text></g><g><title>core::core_arch::simd::i8x16::new (199 samples, 0.50%)</title><rect x="39.8465%" y="37" width="0.4991%" height="15" fill="rgb(251,28,31)" fg:x="15886" fg:w="199"/><text x="40.0965%" y="47.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (549 samples, 1.38%)</title><rect x="40.3456%" y="37" width="1.3770%" height="15" fill="rgb(233,223,10)" fg:x="16085" fg:w="549"/><text x="40.5956%" y="47.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (432 samples, 1.08%)</title><rect x="41.7227%" y="37" width="1.0836%" height="15" fill="rgb(215,21,27)" fg:x="16634" fg:w="432"/><text x="41.9727%" y="47.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (10 samples, 0.03%)</title><rect x="42.8063%" y="37" width="0.0251%" height="15" fill="rgb(232,23,21)" fg:x="17066" fg:w="10"/><text x="43.0563%" y="47.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (92 samples, 0.23%)</title><rect x="42.8313%" y="37" width="0.2308%" height="15" fill="rgb(244,5,23)" fg:x="17076" fg:w="92"/><text x="43.0813%" y="47.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (753 samples, 1.89%)</title><rect x="43.0621%" y="37" width="1.8887%" height="15" fill="rgb(226,81,46)" fg:x="17168" fg:w="753"/><text x="43.3121%" y="47.50">c..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (45 samples, 0.11%)</title><rect x="44.9508%" y="37" width="0.1129%" height="15" fill="rgb(247,70,30)" fg:x="17921" fg:w="45"/><text x="45.2008%" y="47.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (274 samples, 0.69%)</title><rect x="45.0637%" y="37" width="0.6873%" height="15" fill="rgb(212,68,19)" fg:x="17966" fg:w="274"/><text x="45.3137%" y="47.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_undefined_si128 (358 samples, 0.90%)</title><rect x="45.7510%" y="37" width="0.8980%" height="15" fill="rgb(240,187,13)" fg:x="18240" fg:w="358"/><text x="46.0010%" y="47.50"></text></g><g><title>core::hash::Hasher::write_u8 (45 samples, 0.11%)</title><rect x="46.6489%" y="37" width="0.1129%" height="15" fill="rgb(223,113,26)" fg:x="18598" fg:w="45"/><text x="46.8989%" y="47.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (80 samples, 0.20%)</title><rect x="46.7618%" y="37" width="0.2007%" height="15" fill="rgb(206,192,2)" fg:x="18643" fg:w="80"/><text x="47.0118%" y="47.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (99 samples, 0.25%)</title><rect x="46.9625%" y="37" width="0.2483%" height="15" fill="rgb(241,108,4)" fg:x="18723" fg:w="99"/><text x="47.2125%" y="47.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (57 samples, 0.14%)</title><rect x="47.2108%" y="37" width="0.1430%" height="15" fill="rgb(247,173,49)" fg:x="18822" fg:w="57"/><text x="47.4608%" y="47.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (30 samples, 0.08%)</title><rect x="47.3538%" y="37" width="0.0752%" height="15" fill="rgb(224,114,35)" fg:x="18879" fg:w="30"/><text x="47.6038%" y="47.50"></text></g><g><title>core::hash::sip::u8to64_le (400 samples, 1.00%)</title><rect x="47.4290%" y="37" width="1.0033%" height="15" fill="rgb(245,159,27)" fg:x="18909" fg:w="400"/><text x="47.6790%" y="47.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (90 samples, 0.23%)</title><rect x="48.4323%" y="37" width="0.2257%" height="15" fill="rgb(245,172,44)" fg:x="19309" fg:w="90"/><text x="48.6823%" y="47.50"></text></g><g><title>core::intrinsics::write_bytes (5 samples, 0.01%)</title><rect x="48.6581%" y="37" width="0.0125%" height="15" fill="rgb(236,23,11)" fg:x="19399" fg:w="5"/><text x="48.9081%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (30 samples, 0.08%)</title><rect x="48.6706%" y="37" width="0.0752%" height="15" fill="rgb(205,117,38)" fg:x="19404" fg:w="30"/><text x="48.9206%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (80 samples, 0.20%)</title><rect x="48.7509%" y="37" width="0.2007%" height="15" fill="rgb(237,72,25)" fg:x="19436" fg:w="80"/><text x="49.0009%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (239 samples, 0.60%)</title><rect x="48.9515%" y="37" width="0.5995%" height="15" fill="rgb(244,70,9)" fg:x="19516" fg:w="239"/><text x="49.2015%" y="47.50"></text></g><g><title>core::mem::forget (40 samples, 0.10%)</title><rect x="49.5510%" y="37" width="0.1003%" height="15" fill="rgb(217,125,39)" fg:x="19755" fg:w="40"/><text x="49.8010%" y="47.50"></text></g><g><title>core::mem::needs_drop (34 samples, 0.09%)</title><rect x="49.6513%" y="37" width="0.0853%" height="15" fill="rgb(235,36,10)" fg:x="19795" fg:w="34"/><text x="49.9013%" y="47.50"></text></g><g><title>core::mem::replace (26 samples, 0.07%)</title><rect x="49.7366%" y="37" width="0.0652%" height="15" fill="rgb(251,123,47)" fg:x="19829" fg:w="26"/><text x="49.9866%" y="47.50"></text></g><g><title>core::mem::size_of_val (24 samples, 0.06%)</title><rect x="49.8018%" y="37" width="0.0602%" height="15" fill="rgb(221,13,13)" fg:x="19855" fg:w="24"/><text x="50.0518%" y="47.50"></text></g><g><title>core::mem::swap (4 samples, 0.01%)</title><rect x="49.8620%" y="37" width="0.0100%" height="15" fill="rgb(238,131,9)" fg:x="19879" fg:w="4"/><text x="50.1120%" y="47.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (295 samples, 0.74%)</title><rect x="49.8721%" y="37" width="0.7399%" height="15" fill="rgb(211,50,8)" fg:x="19883" fg:w="295"/><text x="50.1221%" y="47.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (179 samples, 0.45%)</title><rect x="50.6120%" y="37" width="0.4490%" height="15" fill="rgb(245,182,24)" fg:x="20178" fg:w="179"/><text x="50.8620%" y="47.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (7 samples, 0.02%)</title><rect x="51.0635%" y="37" width="0.0176%" height="15" fill="rgb(242,14,37)" fg:x="20358" fg:w="7"/><text x="51.3135%" y="47.50"></text></g><g><title>core::num::nonzero::NonZeroUsize::get (69 samples, 0.17%)</title><rect x="51.0811%" y="37" width="0.1731%" height="15" fill="rgb(246,228,12)" fg:x="20365" fg:w="69"/><text x="51.3311%" y="47.50"></text></g><g><title>core::num::nonzero::NonZeroUsize::new_unchecked (145 samples, 0.36%)</title><rect x="51.2541%" y="37" width="0.3637%" height="15" fill="rgb(213,55,15)" fg:x="20434" fg:w="145"/><text x="51.5041%" y="47.50"></text></g><g><title>core::ops::function::FnOnce::call_once (114 samples, 0.29%)</title><rect x="51.6178%" y="37" width="0.2859%" height="15" fill="rgb(209,9,3)" fg:x="20579" fg:w="114"/><text x="51.8678%" y="47.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (15 samples, 0.04%)</title><rect x="51.9038%" y="37" width="0.0376%" height="15" fill="rgb(230,59,30)" fg:x="20693" fg:w="15"/><text x="52.1538%" y="47.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (37 samples, 0.09%)</title><rect x="51.9414%" y="37" width="0.0928%" height="15" fill="rgb(209,121,21)" fg:x="20708" fg:w="37"/><text x="52.1914%" y="47.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (135 samples, 0.34%)</title><rect x="52.0342%" y="37" width="0.3386%" height="15" fill="rgb(220,109,13)" fg:x="20745" fg:w="135"/><text x="52.2842%" y="47.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (34 samples, 0.09%)</title><rect x="52.3728%" y="37" width="0.0853%" height="15" fill="rgb(232,18,1)" fg:x="20880" fg:w="34"/><text x="52.6228%" y="47.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or_else (8 samples, 0.02%)</title><rect x="52.4581%" y="37" width="0.0201%" height="15" fill="rgb(215,41,42)" fg:x="20914" fg:w="8"/><text x="52.7081%" y="47.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (4 samples, 0.01%)</title><rect x="52.4782%" y="37" width="0.0100%" height="15" fill="rgb(224,123,36)" fg:x="20922" fg:w="4"/><text x="52.7282%" y="47.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::cast (71 samples, 0.18%)</title><rect x="52.4882%" y="37" width="0.1781%" height="15" fill="rgb(240,125,3)" fg:x="20926" fg:w="71"/><text x="52.7382%" y="47.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (125 samples, 0.31%)</title><rect x="52.6663%" y="37" width="0.3135%" height="15" fill="rgb(205,98,50)" fg:x="20997" fg:w="125"/><text x="52.9163%" y="47.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (140 samples, 0.35%)</title><rect x="52.9798%" y="37" width="0.3512%" height="15" fill="rgb(205,185,37)" fg:x="21122" fg:w="140"/><text x="53.2298%" y="47.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (462 samples, 1.16%)</title><rect x="53.3310%" y="37" width="1.1588%" height="15" fill="rgb(238,207,15)" fg:x="21262" fg:w="462"/><text x="53.5810%" y="47.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::as_ptr (15 samples, 0.04%)</title><rect x="54.4898%" y="37" width="0.0376%" height="15" fill="rgb(213,199,42)" fg:x="21724" fg:w="15"/><text x="54.7398%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,())&gt; (35 samples, 0.09%)</title><rect x="54.5274%" y="37" width="0.0878%" height="15" fill="rgb(235,201,11)" fg:x="21739" fg:w="35"/><text x="54.7774%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;str&gt;&gt; (10 samples, 0.03%)</title><rect x="54.6152%" y="37" width="0.0251%" height="15" fill="rgb(207,46,11)" fg:x="21774" fg:w="10"/><text x="54.8652%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (44 samples, 0.11%)</title><rect x="54.6403%" y="37" width="0.1104%" height="15" fill="rgb(241,35,35)" fg:x="21784" fg:w="44"/><text x="54.8903%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (55 samples, 0.14%)</title><rect x="54.7507%" y="37" width="0.1380%" height="15" fill="rgb(243,32,47)" fg:x="21828" fg:w="55"/><text x="55.0007%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;&amp;str&gt;&gt; (12 samples, 0.03%)</title><rect x="54.8886%" y="37" width="0.0301%" height="15" fill="rgb(247,202,23)" fg:x="21883" fg:w="12"/><text x="55.1386%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (94 samples, 0.24%)</title><rect x="54.9187%" y="37" width="0.2358%" height="15" fill="rgb(219,102,11)" fg:x="21895" fg:w="94"/><text x="55.1687%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,(),std::collections::hash::map::RandomState&gt;&gt; (10 samples, 0.03%)</title><rect x="55.1545%" y="37" width="0.0251%" height="15" fill="rgb(243,110,44)" fg:x="21989" fg:w="10"/><text x="55.4045%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,())&gt;&gt; (14 samples, 0.04%)</title><rect x="55.1796%" y="37" width="0.0351%" height="15" fill="rgb(222,74,54)" fg:x="21999" fg:w="14"/><text x="55.4296%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;alloc::string::String,std::collections::hash::map::RandomState&gt;&gt; (14 samples, 0.04%)</title><rect x="55.2222%" y="37" width="0.0351%" height="15" fill="rgb(216,99,12)" fg:x="22016" fg:w="14"/><text x="55.4722%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;alloc::string::String&gt;&gt; (24 samples, 0.06%)</title><rect x="55.2573%" y="37" width="0.0602%" height="15" fill="rgb(226,22,26)" fg:x="22030" fg:w="24"/><text x="55.5073%" y="47.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (96 samples, 0.24%)</title><rect x="55.3175%" y="37" width="0.2408%" height="15" fill="rgb(217,163,10)" fg:x="22054" fg:w="96"/><text x="55.5675%" y="47.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (98 samples, 0.25%)</title><rect x="55.5583%" y="37" width="0.2458%" height="15" fill="rgb(213,25,53)" fg:x="22150" fg:w="98"/><text x="55.8083%" y="47.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (825 samples, 2.07%)</title><rect x="55.8042%" y="37" width="2.0693%" height="15" fill="rgb(252,105,26)" fg:x="22248" fg:w="825"/><text x="56.0542%" y="47.50">c..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (693 samples, 1.74%)</title><rect x="57.8735%" y="37" width="1.7382%" height="15" fill="rgb(220,39,43)" fg:x="23073" fg:w="693"/><text x="58.1235%" y="47.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1,764 samples, 4.42%)</title><rect x="59.6117%" y="37" width="4.4246%" height="15" fill="rgb(229,68,48)" fg:x="23766" fg:w="1764"/><text x="59.8617%" y="47.50">core:..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (722 samples, 1.81%)</title><rect x="64.0363%" y="37" width="1.8110%" height="15" fill="rgb(252,8,32)" fg:x="25530" fg:w="722"/><text x="64.2863%" y="47.50">c..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (30 samples, 0.08%)</title><rect x="65.8473%" y="37" width="0.0752%" height="15" fill="rgb(223,20,43)" fg:x="26252" fg:w="30"/><text x="66.0973%" y="47.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (53 samples, 0.13%)</title><rect x="65.9225%" y="37" width="0.1329%" height="15" fill="rgb(229,81,49)" fg:x="26282" fg:w="53"/><text x="66.1725%" y="47.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (653 samples, 1.64%)</title><rect x="66.0555%" y="37" width="1.6379%" height="15" fill="rgb(236,28,36)" fg:x="26335" fg:w="653"/><text x="66.3055%" y="47.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::as_mut_ptr (18 samples, 0.05%)</title><rect x="67.6934%" y="37" width="0.0451%" height="15" fill="rgb(249,185,26)" fg:x="26988" fg:w="18"/><text x="67.9434%" y="47.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::as_non_null_ptr (44 samples, 0.11%)</title><rect x="67.7385%" y="37" width="0.1104%" height="15" fill="rgb(249,174,33)" fg:x="27006" fg:w="44"/><text x="67.9885%" y="47.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (55 samples, 0.14%)</title><rect x="67.8489%" y="37" width="0.1380%" height="15" fill="rgb(233,201,37)" fg:x="27050" fg:w="55"/><text x="68.0989%" y="47.50"></text></g><g><title>core::ptr::read (18 samples, 0.05%)</title><rect x="67.9869%" y="37" width="0.0451%" height="15" fill="rgb(221,78,26)" fg:x="27105" fg:w="18"/><text x="68.2369%" y="47.50"></text></g><g><title>core::ptr::slice_from_raw_parts (133 samples, 0.33%)</title><rect x="68.0320%" y="37" width="0.3336%" height="15" fill="rgb(250,127,30)" fg:x="27123" fg:w="133"/><text x="68.2820%" y="47.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (154 samples, 0.39%)</title><rect x="68.3656%" y="37" width="0.3863%" height="15" fill="rgb(230,49,44)" fg:x="27256" fg:w="154"/><text x="68.6156%" y="47.50"></text></g><g><title>core::ptr::swap_nonoverlapping (4 samples, 0.01%)</title><rect x="68.7519%" y="37" width="0.0100%" height="15" fill="rgb(229,67,23)" fg:x="27410" fg:w="4"/><text x="69.0019%" y="47.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (17 samples, 0.04%)</title><rect x="68.7619%" y="37" width="0.0426%" height="15" fill="rgb(249,83,47)" fg:x="27414" fg:w="17"/><text x="69.0119%" y="47.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (5 samples, 0.01%)</title><rect x="68.8046%" y="37" width="0.0125%" height="15" fill="rgb(215,43,3)" fg:x="27431" fg:w="5"/><text x="69.0546%" y="47.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (219 samples, 0.55%)</title><rect x="68.8171%" y="37" width="0.5493%" height="15" fill="rgb(238,154,13)" fg:x="27436" fg:w="219"/><text x="69.0671%" y="47.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::cast (100 samples, 0.25%)</title><rect x="69.3664%" y="37" width="0.2508%" height="15" fill="rgb(219,56,2)" fg:x="27655" fg:w="100"/><text x="69.6164%" y="47.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (102 samples, 0.26%)</title><rect x="69.6172%" y="37" width="0.2558%" height="15" fill="rgb(233,0,4)" fg:x="27755" fg:w="102"/><text x="69.8672%" y="47.50"></text></g><g><title>core::ptr::write (267 samples, 0.67%)</title><rect x="69.8731%" y="37" width="0.6697%" height="15" fill="rgb(235,30,7)" fg:x="27857" fg:w="267"/><text x="70.1231%" y="47.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (60 samples, 0.15%)</title><rect x="70.5553%" y="37" width="0.1505%" height="15" fill="rgb(250,79,13)" fg:x="28129" fg:w="60"/><text x="70.8053%" y="47.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (45 samples, 0.11%)</title><rect x="70.7058%" y="37" width="0.1129%" height="15" fill="rgb(211,146,34)" fg:x="28189" fg:w="45"/><text x="70.9558%" y="47.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (50 samples, 0.13%)</title><rect x="70.8187%" y="37" width="0.1254%" height="15" fill="rgb(228,22,38)" fg:x="28234" fg:w="50"/><text x="71.0687%" y="47.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (11 samples, 0.03%)</title><rect x="70.9441%" y="37" width="0.0276%" height="15" fill="rgb(235,168,5)" fg:x="28284" fg:w="11"/><text x="71.1941%" y="47.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (54 samples, 0.14%)</title><rect x="70.9717%" y="37" width="0.1354%" height="15" fill="rgb(221,155,16)" fg:x="28295" fg:w="54"/><text x="71.2217%" y="47.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (29 samples, 0.07%)</title><rect x="71.1072%" y="37" width="0.0727%" height="15" fill="rgb(215,215,53)" fg:x="28349" fg:w="29"/><text x="71.3572%" y="47.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (60 samples, 0.15%)</title><rect x="71.1849%" y="37" width="0.1505%" height="15" fill="rgb(223,4,10)" fg:x="28380" fg:w="60"/><text x="71.4349%" y="47.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (90 samples, 0.23%)</title><rect x="71.3354%" y="37" width="0.2257%" height="15" fill="rgb(234,103,6)" fg:x="28440" fg:w="90"/><text x="71.5854%" y="47.50"></text></g><g><title>core::slice::raw::from_raw_parts (119 samples, 0.30%)</title><rect x="71.5612%" y="37" width="0.2985%" height="15" fill="rgb(227,97,0)" fg:x="28530" fg:w="119"/><text x="71.8112%" y="47.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (43 samples, 0.11%)</title><rect x="71.8596%" y="37" width="0.1079%" height="15" fill="rgb(234,150,53)" fg:x="28649" fg:w="43"/><text x="72.1096%" y="47.50"></text></g><g><title>core::str::converts::from_utf8_unchecked (122 samples, 0.31%)</title><rect x="71.9675%" y="37" width="0.3060%" height="15" fill="rgb(228,201,54)" fg:x="28692" fg:w="122"/><text x="72.2175%" y="47.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (170 samples, 0.43%)</title><rect x="72.2735%" y="37" width="0.4264%" height="15" fill="rgb(222,22,37)" fg:x="28814" fg:w="170"/><text x="72.5235%" y="47.50"></text></g><g><title>core::str::validations::next_code_point (174 samples, 0.44%)</title><rect x="72.7099%" y="37" width="0.4364%" height="15" fill="rgb(237,53,32)" fg:x="28988" fg:w="174"/><text x="72.9599%" y="47.50"></text></g><g><title>day12::Graph::day1 (7 samples, 0.02%)</title><rect x="73.1464%" y="37" width="0.0176%" height="15" fill="rgb(233,25,53)" fg:x="29162" fg:w="7"/><text x="73.3964%" y="47.50"></text></g><g><title>day12::Graph::day2 (309 samples, 0.78%)</title><rect x="73.1639%" y="37" width="0.7751%" height="15" fill="rgb(210,40,34)" fg:x="29169" fg:w="309"/><text x="73.4139%" y="47.50"></text></g><g><title>day12::is_lowercase (37 samples, 0.09%)</title><rect x="73.9390%" y="37" width="0.0928%" height="15" fill="rgb(241,220,44)" fg:x="29478" fg:w="37"/><text x="74.1890%" y="47.50"></text></g><g><title>day12::is_lowercase::{{closure}} (31 samples, 0.08%)</title><rect x="74.0318%" y="37" width="0.0778%" height="15" fill="rgb(235,28,35)" fg:x="29515" fg:w="31"/><text x="74.2818%" y="47.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (28 samples, 0.07%)</title><rect x="74.1146%" y="37" width="0.0702%" height="15" fill="rgb(210,56,17)" fg:x="29548" fg:w="28"/><text x="74.3646%" y="47.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (5 samples, 0.01%)</title><rect x="74.1848%" y="37" width="0.0125%" height="15" fill="rgb(224,130,29)" fg:x="29576" fg:w="5"/><text x="74.4348%" y="47.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (23 samples, 0.06%)</title><rect x="74.1974%" y="37" width="0.0577%" height="15" fill="rgb(235,212,8)" fg:x="29581" fg:w="23"/><text x="74.4474%" y="47.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (77 samples, 0.19%)</title><rect x="74.2550%" y="37" width="0.1931%" height="15" fill="rgb(223,33,50)" fg:x="29604" fg:w="77"/><text x="74.5050%" y="47.50"></text></g><g><title>hashbrown::map::equivalent_key (9 samples, 0.02%)</title><rect x="74.4482%" y="37" width="0.0226%" height="15" fill="rgb(219,149,13)" fg:x="29681" fg:w="9"/><text x="74.6982%" y="47.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (57 samples, 0.14%)</title><rect x="74.4708%" y="37" width="0.1430%" height="15" fill="rgb(250,156,29)" fg:x="29690" fg:w="57"/><text x="74.7208%" y="47.50"></text></g><g><title>hashbrown::map::make_hash (65 samples, 0.16%)</title><rect x="74.6137%" y="37" width="0.1630%" height="15" fill="rgb(216,193,19)" fg:x="29747" fg:w="65"/><text x="74.8637%" y="47.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (6 samples, 0.02%)</title><rect x="74.7818%" y="37" width="0.0150%" height="15" fill="rgb(216,135,14)" fg:x="29814" fg:w="6"/><text x="75.0318%" y="47.50"></text></g><g><title>hashbrown::map::make_insert_hash (37 samples, 0.09%)</title><rect x="74.7968%" y="37" width="0.0928%" height="15" fill="rgb(241,47,5)" fg:x="29820" fg:w="37"/><text x="75.0468%" y="47.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (8 samples, 0.02%)</title><rect x="74.8896%" y="37" width="0.0201%" height="15" fill="rgb(233,42,35)" fg:x="29857" fg:w="8"/><text x="75.1396%" y="47.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (589 samples, 1.48%)</title><rect x="74.9097%" y="37" width="1.4774%" height="15" fill="rgb(231,13,6)" fg:x="29865" fg:w="589"/><text x="75.1597%" y="47.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (102 samples, 0.26%)</title><rect x="76.3871%" y="37" width="0.2558%" height="15" fill="rgb(207,181,40)" fg:x="30454" fg:w="102"/><text x="76.6371%" y="47.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::copy_from_nonoverlapping (15 samples, 0.04%)</title><rect x="76.6429%" y="37" width="0.0376%" height="15" fill="rgb(254,173,49)" fg:x="30556" fg:w="15"/><text x="76.8929%" y="47.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (148 samples, 0.37%)</title><rect x="76.6805%" y="37" width="0.3712%" height="15" fill="rgb(221,1,38)" fg:x="30571" fg:w="148"/><text x="76.9305%" y="47.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (418 samples, 1.05%)</title><rect x="77.0518%" y="37" width="1.0485%" height="15" fill="rgb(206,124,46)" fg:x="30719" fg:w="418"/><text x="77.3018%" y="47.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (499 samples, 1.25%)</title><rect x="78.1002%" y="37" width="1.2516%" height="15" fill="rgb(249,21,11)" fg:x="31137" fg:w="499"/><text x="78.3502%" y="47.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::to_base_index (164 samples, 0.41%)</title><rect x="79.3519%" y="37" width="0.4114%" height="15" fill="rgb(222,201,40)" fg:x="31636" fg:w="164"/><text x="79.6019%" y="47.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (289 samples, 0.72%)</title><rect x="79.7632%" y="37" width="0.7249%" height="15" fill="rgb(235,61,29)" fg:x="31800" fg:w="289"/><text x="80.0132%" y="47.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (28 samples, 0.07%)</title><rect x="80.4881%" y="37" width="0.0702%" height="15" fill="rgb(219,207,3)" fg:x="32089" fg:w="28"/><text x="80.7381%" y="47.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (279 samples, 0.70%)</title><rect x="80.5583%" y="37" width="0.6998%" height="15" fill="rgb(222,56,46)" fg:x="32117" fg:w="279"/><text x="80.8083%" y="47.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (120 samples, 0.30%)</title><rect x="81.2582%" y="37" width="0.3010%" height="15" fill="rgb(239,76,54)" fg:x="32396" fg:w="120"/><text x="81.5082%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (159 samples, 0.40%)</title><rect x="81.5591%" y="37" width="0.3988%" height="15" fill="rgb(231,124,27)" fg:x="32516" fg:w="159"/><text x="81.8091%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket_index (131 samples, 0.33%)</title><rect x="81.9580%" y="37" width="0.3286%" height="15" fill="rgb(249,195,6)" fg:x="32675" fg:w="131"/><text x="82.2080%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (793 samples, 1.99%)</title><rect x="82.2865%" y="37" width="1.9891%" height="15" fill="rgb(237,174,47)" fg:x="32806" fg:w="793"/><text x="82.5365%" y="47.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::data_end (311 samples, 0.78%)</title><rect x="84.2756%" y="37" width="0.7801%" height="15" fill="rgb(206,201,31)" fg:x="33599" fg:w="311"/><text x="84.5256%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (307 samples, 0.77%)</title><rect x="85.0557%" y="37" width="0.7700%" height="15" fill="rgb(231,57,52)" fg:x="33910" fg:w="307"/><text x="85.3057%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (177 samples, 0.44%)</title><rect x="85.8257%" y="37" width="0.4440%" height="15" fill="rgb(248,177,22)" fg:x="34217" fg:w="177"/><text x="86.0757%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (15 samples, 0.04%)</title><rect x="86.2697%" y="37" width="0.0376%" height="15" fill="rgb(215,211,37)" fg:x="34394" fg:w="15"/><text x="86.5197%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (32 samples, 0.08%)</title><rect x="86.3073%" y="37" width="0.0803%" height="15" fill="rgb(241,128,51)" fg:x="34409" fg:w="32"/><text x="86.5573%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (29 samples, 0.07%)</title><rect x="86.3876%" y="37" width="0.0727%" height="15" fill="rgb(227,165,31)" fg:x="34441" fg:w="29"/><text x="86.6376%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (34 samples, 0.09%)</title><rect x="86.4603%" y="37" width="0.0853%" height="15" fill="rgb(228,167,24)" fg:x="34470" fg:w="34"/><text x="86.7103%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (194 samples, 0.49%)</title><rect x="86.5456%" y="37" width="0.4866%" height="15" fill="rgb(228,143,12)" fg:x="34504" fg:w="194"/><text x="86.7956%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (14 samples, 0.04%)</title><rect x="87.0322%" y="37" width="0.0351%" height="15" fill="rgb(249,149,8)" fg:x="34698" fg:w="14"/><text x="87.2822%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (4 samples, 0.01%)</title><rect x="87.0673%" y="37" width="0.0100%" height="15" fill="rgb(243,35,44)" fg:x="34712" fg:w="4"/><text x="87.3173%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (95 samples, 0.24%)</title><rect x="87.0774%" y="37" width="0.2383%" height="15" fill="rgb(246,89,9)" fg:x="34716" fg:w="95"/><text x="87.3274%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (7 samples, 0.02%)</title><rect x="87.3156%" y="37" width="0.0176%" height="15" fill="rgb(233,213,13)" fg:x="34811" fg:w="7"/><text x="87.5656%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (15 samples, 0.04%)</title><rect x="87.3332%" y="37" width="0.0376%" height="15" fill="rgb(233,141,41)" fg:x="34818" fg:w="15"/><text x="87.5832%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::resize (86 samples, 0.22%)</title><rect x="87.3708%" y="37" width="0.2157%" height="15" fill="rgb(239,167,4)" fg:x="34833" fg:w="86"/><text x="87.6208%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (43 samples, 0.11%)</title><rect x="87.5865%" y="37" width="0.1079%" height="15" fill="rgb(209,217,16)" fg:x="34919" fg:w="43"/><text x="87.8365%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::buckets (33 samples, 0.08%)</title><rect x="87.6944%" y="37" width="0.0828%" height="15" fill="rgb(219,88,35)" fg:x="34962" fg:w="33"/><text x="87.9444%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::ctrl (249 samples, 0.62%)</title><rect x="87.7772%" y="37" width="0.6246%" height="15" fill="rgb(220,193,23)" fg:x="34995" fg:w="249"/><text x="88.0272%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::data_end (36 samples, 0.09%)</title><rect x="88.4017%" y="37" width="0.0903%" height="15" fill="rgb(230,90,52)" fg:x="35244" fg:w="36"/><text x="88.6517%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (28 samples, 0.07%)</title><rect x="88.4920%" y="37" width="0.0702%" height="15" fill="rgb(252,106,19)" fg:x="35280" fg:w="28"/><text x="88.7420%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (221 samples, 0.55%)</title><rect x="88.5623%" y="37" width="0.5543%" height="15" fill="rgb(206,74,20)" fg:x="35308" fg:w="221"/><text x="88.8123%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (114 samples, 0.29%)</title><rect x="89.1166%" y="37" width="0.2859%" height="15" fill="rgb(230,138,44)" fg:x="35529" fg:w="114"/><text x="89.3666%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_empty_singleton (23 samples, 0.06%)</title><rect x="89.4025%" y="37" width="0.0577%" height="15" fill="rgb(235,182,43)" fg:x="35643" fg:w="23"/><text x="89.6525%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (215 samples, 0.54%)</title><rect x="89.4602%" y="37" width="0.5393%" height="15" fill="rgb(242,16,51)" fg:x="35666" fg:w="215"/><text x="89.7102%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::num_ctrl_bytes (4 samples, 0.01%)</title><rect x="89.9995%" y="37" width="0.0100%" height="15" fill="rgb(248,9,4)" fg:x="35881" fg:w="4"/><text x="90.2495%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (16 samples, 0.04%)</title><rect x="90.0095%" y="37" width="0.0401%" height="15" fill="rgb(210,31,22)" fg:x="35885" fg:w="16"/><text x="90.2595%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (18 samples, 0.05%)</title><rect x="90.0497%" y="37" width="0.0451%" height="15" fill="rgb(239,54,39)" fg:x="35901" fg:w="18"/><text x="90.2997%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize::{{closure}} (8 samples, 0.02%)</title><rect x="90.0948%" y="37" width="0.0201%" height="15" fill="rgb(230,99,41)" fg:x="35919" fg:w="8"/><text x="90.3448%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (100 samples, 0.25%)</title><rect x="90.1149%" y="37" width="0.2508%" height="15" fill="rgb(253,106,12)" fg:x="35927" fg:w="100"/><text x="90.3649%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (15 samples, 0.04%)</title><rect x="90.3657%" y="37" width="0.0376%" height="15" fill="rgb(213,46,41)" fg:x="36027" fg:w="15"/><text x="90.6157%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (91 samples, 0.23%)</title><rect x="90.4033%" y="37" width="0.2283%" height="15" fill="rgb(215,133,35)" fg:x="36042" fg:w="91"/><text x="90.6533%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (18 samples, 0.05%)</title><rect x="90.6316%" y="37" width="0.0451%" height="15" fill="rgb(213,28,5)" fg:x="36133" fg:w="18"/><text x="90.8816%" y="47.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (180 samples, 0.45%)</title><rect x="90.6767%" y="37" width="0.4515%" height="15" fill="rgb(215,77,49)" fg:x="36151" fg:w="180"/><text x="90.9267%" y="47.50"></text></g><g><title>hashbrown::raw::TableLayout::new (56 samples, 0.14%)</title><rect x="91.1282%" y="37" width="0.1405%" height="15" fill="rgb(248,100,22)" fg:x="36331" fg:w="56"/><text x="91.3782%" y="47.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (40 samples, 0.10%)</title><rect x="91.2687%" y="37" width="0.1003%" height="15" fill="rgb(208,67,9)" fg:x="36387" fg:w="40"/><text x="91.5187%" y="47.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc::{{closure}} (19 samples, 0.05%)</title><rect x="91.3690%" y="37" width="0.0477%" height="15" fill="rgb(219,133,21)" fg:x="36427" fg:w="19"/><text x="91.6190%" y="47.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (7 samples, 0.02%)</title><rect x="91.4167%" y="37" width="0.0176%" height="15" fill="rgb(246,46,29)" fg:x="36446" fg:w="7"/><text x="91.6667%" y="47.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (57 samples, 0.14%)</title><rect x="91.4342%" y="37" width="0.1430%" height="15" fill="rgb(246,185,52)" fg:x="36453" fg:w="57"/><text x="91.6842%" y="47.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (619 samples, 1.55%)</title><rect x="91.5772%" y="37" width="1.5526%" height="15" fill="rgb(252,136,11)" fg:x="36510" fg:w="619"/><text x="91.8272%" y="47.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (632 samples, 1.59%)</title><rect x="93.1298%" y="37" width="1.5852%" height="15" fill="rgb(219,138,53)" fg:x="37129" fg:w="632"/><text x="93.3798%" y="47.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (307 samples, 0.77%)</title><rect x="94.7151%" y="37" width="0.7700%" height="15" fill="rgb(211,51,23)" fg:x="37761" fg:w="307"/><text x="94.9651%" y="47.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (18 samples, 0.05%)</title><rect x="95.4851%" y="37" width="0.0451%" height="15" fill="rgb(247,221,28)" fg:x="38068" fg:w="18"/><text x="95.7351%" y="47.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (5 samples, 0.01%)</title><rect x="95.5302%" y="37" width="0.0125%" height="15" fill="rgb(251,222,45)" fg:x="38086" fg:w="5"/><text x="95.7802%" y="47.50"></text></g><g><title>hashbrown::raw::h1 (20 samples, 0.05%)</title><rect x="95.5428%" y="37" width="0.0502%" height="15" fill="rgb(217,162,53)" fg:x="38091" fg:w="20"/><text x="95.7928%" y="47.50"></text></g><g><title>hashbrown::raw::h2 (46 samples, 0.12%)</title><rect x="95.5930%" y="37" width="0.1154%" height="15" fill="rgb(229,93,14)" fg:x="38111" fg:w="46"/><text x="95.8430%" y="47.50"></text></g><g><title>hashbrown::raw::is_full (15 samples, 0.04%)</title><rect x="95.7083%" y="37" width="0.0376%" height="15" fill="rgb(209,67,49)" fg:x="38157" fg:w="15"/><text x="95.9583%" y="47.50"></text></g><g><title>hashbrown::raw::offset_from (71 samples, 0.18%)</title><rect x="95.7460%" y="37" width="0.1781%" height="15" fill="rgb(213,87,29)" fg:x="38172" fg:w="71"/><text x="95.9960%" y="47.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (177 samples, 0.44%)</title><rect x="95.9291%" y="37" width="0.4440%" height="15" fill="rgb(205,151,52)" fg:x="38245" fg:w="177"/><text x="96.1791%" y="47.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (109 samples, 0.27%)</title><rect x="96.3730%" y="37" width="0.2734%" height="15" fill="rgb(253,215,39)" fg:x="38422" fg:w="109"/><text x="96.6230%" y="47.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (288 samples, 0.72%)</title><rect x="96.6464%" y="37" width="0.7224%" height="15" fill="rgb(221,220,41)" fg:x="38531" fg:w="288"/><text x="96.8964%" y="47.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (16 samples, 0.04%)</title><rect x="97.3688%" y="37" width="0.0401%" height="15" fill="rgb(218,133,21)" fg:x="38819" fg:w="16"/><text x="97.6188%" y="47.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (87 samples, 0.22%)</title><rect x="97.4089%" y="37" width="0.2182%" height="15" fill="rgb(221,193,43)" fg:x="38835" fg:w="87"/><text x="97.6589%" y="47.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (191 samples, 0.48%)</title><rect x="97.6272%" y="37" width="0.4791%" height="15" fill="rgb(240,128,52)" fg:x="38922" fg:w="191"/><text x="97.8772%" y="47.50"></text></g><g><title>hashbrown::scopeguard::guard (16 samples, 0.04%)</title><rect x="98.1063%" y="37" width="0.0401%" height="15" fill="rgb(253,114,12)" fg:x="39113" fg:w="16"/><text x="98.3563%" y="47.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (26 samples, 0.07%)</title><rect x="98.1464%" y="37" width="0.0652%" height="15" fill="rgb(215,223,47)" fg:x="39129" fg:w="26"/><text x="98.3964%" y="47.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (57 samples, 0.14%)</title><rect x="98.2116%" y="37" width="0.1430%" height="15" fill="rgb(248,225,23)" fg:x="39155" fg:w="57"/><text x="98.4616%" y="47.50"></text></g><g><title>malloc (556 samples, 1.39%)</title><rect x="98.3546%" y="37" width="1.3946%" height="15" fill="rgb(250,108,0)" fg:x="39212" fg:w="556"/><text x="98.6046%" y="47.50"></text></g><g><title>memcpy@plt (47 samples, 0.12%)</title><rect x="99.7492%" y="37" width="0.1179%" height="15" fill="rgb(228,208,7)" fg:x="39768" fg:w="47"/><text x="99.9992%" y="47.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (19 samples, 0.05%)</title><rect x="99.8721%" y="37" width="0.0477%" height="15" fill="rgb(244,45,10)" fg:x="39817" fg:w="19"/><text x="100.1221%" y="47.50"></text></g><g><title>all (39,868 samples, 100%)</title><rect x="0.0000%" y="69" width="100.0000%" height="15" fill="rgb(207,125,25)" fg:x="0" fg:w="39868"/><text x="0.2500%" y="79.50"></text></g><g><title>day12 (39,868 samples, 100.00%)</title><rect x="0.0000%" y="53" width="100.0000%" height="15" fill="rgb(210,195,18)" fg:x="0" fg:w="39868"/><text x="0.2500%" y="63.50">day12</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (32 samples, 0.08%)</title><rect x="99.9197%" y="37" width="0.0803%" height="15" fill="rgb(249,80,12)" fg:x="39836" fg:w="32"/><text x="100.1697%" y="47.50"></text></g></svg></svg>